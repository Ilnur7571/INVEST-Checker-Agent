import asyncio
import sys
import os

from db import ExamplesDB
from utils import normalize_text#, format_analysis_for_display

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def seed():
    db = ExamplesDB()
    try:
        await db.create_table()

        # Список из 20 примеров User Stories с анализом и оценками
        examples = [
            (
                "Как пользователь, я хочу зарегистрироваться через электронную почту, чтобы иметь доступ к личному кабинету.",
                "Оценка: 5/6\nАнализ:\n- I (Independent): ✓ Независима от других историй.\n- N (Negotiable): ✗ Не указано, что открыто для обсуждения.\n- V (Valuable): ✓ Ценность для пользователя очевидна.\n- E (Estimable): ✓ Можно оценить трудозатраты.\n- S (Small): ✓ Небольшая по объему.\n- T (Testable): ✓ Можно проверить функционал.\nРекомендации:\n- Уточнить возможность обсуждения деталей реализации.\n- Добавить критерии успеха для регистрации.",
                5,
            ),
            (
                "Как администратор, я хочу видеть список активных пользователей, чтобы управлять доступом.",
                "Оценка: 4/6\nАнализ:\n- I (Independent): ✓ Не зависит от других историй.\n- N (Negotiable): ✗ Не указаны варианты реализации.\n- V (Valuable): ✓ Полезно для управления.\n- E (Estimable): ✗ Недостаточно деталей для оценки.\n- S (Small): ✓ Достаточно компактная.\n- T (Testable): ✓ Можно протестировать.\nРекомендации:\n- Уточнить формат списка.\n- Добавить критерии для оценки трудозатрат.",
                4,
            ),
            (
                "Как клиент, я хочу получать уведомления о новых акциях, чтобы не пропустить скидки.",
                "Оценка: 5/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не уточнены каналы уведомлений.\n- V (Valuable): ✓ Ценно для клиента.\n- E (Estimable): ✓ Оцениваемая задача.\n- S (Small): ✓ Небольшая.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Указать каналы уведомлений (email, push).\n- Определить частоту уведомлений.",
                5,
            ),
            (
                "Как разработчик, я хочу интегрировать API платежной системы, чтобы пользователи могли оплачивать заказы.",
                "Оценка: 3/6\nАнализ:\n- I (Independent): ✗ Зависит от выбора платежной системы.\n- N (Negotiable): ✗ Не указано, обсуждаема ли реализация.\n- V (Valuable): ✓ Ценно для бизнеса.\n- E (Estimable): ✗ Требуются детали API.\n- S (Small): ✗ Может быть крупной задачей.\n- T (Testable): ✓ Можно протестировать.\nРекомендации:\n- Уточнить конкретную платежную систему.\n- Разбить на меньшие задачи.",
                3,
            ),
            (
                "Как менеджер, я хочу видеть статистику продаж, чтобы принимать решения по маркетингу.",
                "Оценка: 4/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны варианты отображения.\n- V (Valuable): ✓ Полезно для бизнеса.\n- E (Estimable): ✗ Требуются детали метрик.\n- S (Small): ✓ Компактная задача.\n- T (Testable): ✓ Можно проверить.\nРекомендации:\n- Уточнить, какие метрики нужны.\n- Определить формат отображения (графики, таблицы).",
                4,
            ),
            (
                "Как пользователь, я хочу восстановить пароль, чтобы получить доступ к аккаунту.",
                "Оценка: 5/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указано, обсуждаема ли реализация.\n- V (Valuable): ✓ Ценно для пользователя.\n- E (Estimable): ✓ Оцениваемая.\n- S (Small): ✓ Небольшая.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить процесс восстановления (email, SMS).\n- Добавить критерии безопасности.",
                5,
            ),
            (
                "Как гость, я хочу просматривать каталог товаров без регистрации, чтобы выбрать продукт.",
                "Оценка: 5/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не уточнены детали интерфейса.\n- V (Valuable): ✓ Ценно для гостей.\n- E (Estimable): ✓ Оцениваемая.\n- S (Small): ✓ Компактная.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить, какие данные отображаются.\n- Добавить возможность фильтрации.",
                5,
            ),
            (
                "Как администратор, я хочу блокировать пользователей, чтобы обеспечить безопасность платформы.",
                "Оценка: 4/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны условия блокировки.\n- V (Valuable): ✓ Ценно для безопасности.\n- E (Estimable): ✗ Требуются детали.\n- S (Small): ✓ Небольшая.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить критерии блокировки.\n- Добавить уведомление для пользователя.",
                4,
            ),
            (
                "Как клиент, я хочу добавлять товары в корзину, чтобы оформить заказ.",
                "Оценка: 5/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны варианты интерфейса.\n- V (Valuable): ✓ Ценно для клиента.\n- E (Estimable): ✓ Оцениваемая.\n- S (Small): ✓ Небольшая.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить поведение корзины (например, сохранение).\n- Добавить возможность редактирования корзины.",
                5,
            ),
            (
                "Как разработчик, я хочу логировать ошибки приложения, чтобы упростить отладку.",
                "Оценка: 4/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не уточнены детали логирования.\n- V (Valuable): ✓ Ценно для отладки.\n- E (Estimable): ✗ Требуются детали системы.\n- S (Small): ✓ Компактная.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Указать, какие ошибки логировать.\n- Определить формат логов.",
                4,
            ),
            (
                "Как пользователь, я хочу фильтровать товары по цене, чтобы найти подходящий вариант.",
                "Оценка: 5/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны детали фильтрации.\n- V (Valuable): ✓ Ценно для пользователя.\n- E (Estimable): ✓ Оцениваемая.\n- S (Small): ✓ Небольшая.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить диапазоны цен.\n- Добавить другие фильтры (например, категория).",
                5,
            ),
            (
                "Как менеджер, я хочу экспортировать данные о заказах, чтобы анализировать продажи.",
                "Оценка: 4/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны форматы экспорта.\n- V (Valuable): ✓ Ценно для анализа.\n- E (Estimable): ✗ Требуются детали данных.\n- S (Small): ✓ Компактная.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить формат экспорта (CSV, Excel).\n- Определить набор данных.",
                4,
            ),
            (
                "Как клиент, я хочу видеть историю заказов, чтобы отслеживать покупки.",
                "Оценка: 5/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны детали интерфейса.\n- V (Valuable): ✓ Ценно для клиента.\n- E (Estimable): ✓ Оцениваемая.\n- S (Small): ✓ Небольшая.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить, какие данные отображать.\n- Добавить возможность сортировки.",
                5,
            ),
            (
                "Как администратор, я хочу настраивать права доступа, чтобы контролировать действия пользователей.",
                "Оценка: 3/6\nАнализ:\n- I (Independent): ✗ Зависит от системы ролей.\n- N (Negotiable): ✗ Не указаны варианты.\n- V (Valuable): ✓ Ценно для безопасности.\n- E (Estimable): ✗ Требуются детали.\n- S (Small): ✗ Может быть крупной.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить роли и права.\n- Разбить на меньшие задачи.",
                3,
            ),
            (
                "Как пользователь, я хочу получать push-уведомления о статусе заказа, чтобы быть в курсе доставки.",
                "Оценка: 5/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны детали уведомлений.\n- V (Valuable): ✓ Ценно для пользователя.\n- E (Estimable): ✓ Оцениваемая.\n- S (Small): ✓ Небольшая.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить типы статусов.\n- Добавить возможность отключения уведомлений.",
                5,
            ),
            (
                "Как разработчик, я хочу добавить поддержку нескольких языков, чтобы привлечь международных пользователей.",
                "Оценка: 3/6\nАнализ:\n- I (Independent): ✗ Зависит от текущей системы.\n- N (Negotiable): ✗ Не указаны детали.\n- V (Valuable): ✓ Ценно для бизнеса.\n- E (Estimable): ✗ Требуются детали.\n- S (Small): ✗ Крупная задача.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить список языков.\n- Разбить на подзадачи.",
                3,
            ),
            (
                "Как клиент, я хочу сравнивать товары, чтобы выбрать лучший вариант.",
                "Оценка: 4/6\nАналипс:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны параметры сравнения.\n- V (Valuable): ✓ Ценно для клиента.\n- E (Estimable): ✗ Требуются детали.\n- S (Small): ✓ Небольшая.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить параметры сравнения.\n- Добавить визуальный интерфейс.",
                4,
            ),
            (
                "Как администратор, я хочу архивировать старые заказы, чтобы оптимизировать базу данных.",
                "Оценка: 4/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны детали архивации.\n- V (Valuable): ✓ Ценно для оптимизации.\n- E (Estimable): ✗ Требуются детали.\n- S (Small): ✓ Компактная.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить период архивации.\n- Определить формат хранения.",
                4,
            ),
            (
                "Как пользователь, я хочу сохранять избранные товары, чтобы вернуться к ним позже.",
                "Оценка: 5/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны детали интерфейса.\n- V (Valuable): ✓ Ценно для пользователя.\n- E (Estimable): ✓ Оцениваемая.\n- S (Small): ✓ Небольшая.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить, как сохранять избранное.\n- Добавить возможность удаления.",
                5,
            ),
            (
                "Как менеджер, я хочу получать отчеты о производительности команды, чтобы оценивать эффективность.",
                "Оценка: 4/6\nАнализ:\n- I (Independent): ✓ Независима.\n- N (Negotiable): ✗ Не указаны метрики.\n- V (Valuable): ✓ Ценно для управления.\n- E (Estimable): ✗ Требуются детали.\n- S (Small): ✓ Компактная.\n- T (Testable): ✓ Тестируемая.\nРекомендации:\n- Уточнить метрики производительности.\n- Определить формат отчетов.",
                4,
            ),
        ]

        examples_data = []
        added_count = 0
        skipped_count = 0

        for query, answer, score in examples:
            norm = normalize_text(query)

            # Проверяем, существует ли уже такая история в базе
            similar = await db.find_similar(query, threshold=0.95)  # высокий порог для точного совпадения

            if not similar:  # Если нет точных совпадений
                examples_data.append((query, norm, answer, (score >= 5), score))
                added_count += 1
            else:
                skipped_count += 1
                print(f"⚠️ Пропущен дубликат: {query[:50]}...")

        if examples_data:
            await db.add_examples_batch(examples_data)
            print(f"✅ Добавлено {added_count} новых примеров в базу данных")
        else:
            print("ℹ️ Все примеры уже есть в базе данных")

        if skipped_count > 0:
            print(f"⚠️ Пропущено {skipped_count} дубликатов")

        # Проверим, что данные добавились
        stats = await db.get_statistics()
        print("📊 Статистика базы:")
        print(f"   • Всего историй: {stats['total_stories']}")
        print(f"   • Золотых историй: {stats['golden_stories']}")
        print(f"   • Средний score: {stats['average_score']}")

    except Exception as e:
        print(f"❌ Ошибка при заполнении базы: {e}")
    finally:
        await db.close()


if __name__ == "__main__":
    asyncio.run(seed())