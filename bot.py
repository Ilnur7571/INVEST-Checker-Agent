import asyncio
import io
import re
import logging
import time
from typing import Any, List, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

from db import ExamplesDB
from utils import normalize_text, build_invest_prompt, build_fix_prompt, build_improve_prompt

logger = logging.getLogger("bot")

class InvestBot:
    def __init__(self, token: str, llm_client: Any):
        self.token = token
        self.llm_client = llm_client
        self.db = ExamplesDB()

        self.app = Application.builder().token(self.token).build()
        self._register_handlers()

        self.user_history = {}
        self.last_cleanup = time.time()
        self.max_history_depth = 20

    def _register_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help))
        self.app.add_handler(CallbackQueryHandler(self.callback_handler))
        self.app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), self.handle_message))
        self.app.add_handler(CommandHandler("stats", self.stats))

    def main_menu_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑ INVEST", callback_data="analyze_invest")],
            [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def help_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å", callback_data="close_help")],
            [InlineKeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def navigation_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
             InlineKeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def similar_stories_keyboard(self, similar_stories: List[Tuple], original_text: str):
        keyboard = []

        for i, item in enumerate(similar_stories[:3]):
            story = item[0]
            ratio = item[2]
            keyboard.append([
                InlineKeyboardButton(
                    f"üìö –í–∞—Ä–∏–∞–Ω—Ç {i+1} ({ratio:.0%})",
                    callback_data=f"use_similar_{i}"
                )
            ])

        keyboard.extend([
            [InlineKeyboardButton("üîÅ –ò—Å–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ LLM", callback_data="fix_with_llm")],
            [InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="use_own")]
        ])

        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ", callback_data="restart")
        ])

        return InlineKeyboardMarkup(keyboard)

    def analysis_result_keyboard(self, show_add_to_db: bool = True, score: int = 0):
        keyboard = []

        keyboard.append([
            InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_menu"),
            InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ Jira", callback_data="jira_copy")
        ])

        if show_add_to_db:
            if score >= 5:
                keyboard.append([InlineKeyboardButton("üíæ –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É", callback_data="add_to_db")])
            else:
                keyboard.append([InlineKeyboardButton("‚ú® –£–ª—É—á—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="improve_story")])

        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ", callback_data="restart")
        ])

        return InlineKeyboardMarkup(keyboard)

    def export_menu_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("üìÑ TXT", callback_data="export_txt"),
             InlineKeyboardButton("üìä CSV", callback_data="export_csv")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
             InlineKeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def invalid_story_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("üîÅ –ò—Å–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ LLM", callback_data="fix_with_llm")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def fix_result_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="analyze_fixed")],
            [InlineKeyboardButton("üîÑ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="fix_with_llm")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
             InlineKeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def improved_story_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é", callback_data="analyze_improved")],
            [InlineKeyboardButton("üîÑ –£–ª—É—á—à–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="improve_again")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏", callback_data="export_improved")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
             InlineKeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def _cleanup_old_states(self):
        current_time = time.time()

        if current_time - self.last_cleanup < 1800:
            return

        for chat_id in list(self.user_history.keys()):
            if len(self.user_history[chat_id]) > 50:
                self.user_history[chat_id] = self.user_history[chat_id][-20:]

        self.last_cleanup = current_time

    def _save_state(self, chat_id: int, text: str, reply_markup, parse_mode=None, state_name=""):
        self._cleanup_old_states()

        if chat_id not in self.user_history:
            self.user_history[chat_id] = []

        if len(self.user_history[chat_id]) >= self.max_history_depth:
            self.user_history[chat_id].pop(0)

        self.user_history[chat_id].append({
            "text": text,
            "reply_markup": reply_markup,
            "parse_mode": parse_mode,
            "state_name": state_name
        })

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ User Story –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º INVEST.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ê–Ω–∞–ª–∏–∑ INVEST¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )

        context.user_data.clear()
        context.user_data["mode"] = None

        chat_id = update.effective_chat.id
        self.user_history[chat_id] = []

        self._save_state(chat_id, text, self.main_menu_keyboard(), state_name="main_menu")

        if update.message:
            await update.message.reply_text(text, reply_markup=self.main_menu_keyboard())
        else:
            await update.callback_query.edit_message_text(text, reply_markup=self.main_menu_keyboard())

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "‚ÑπÔ∏è **–ü–æ–º–æ—â—å:**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–ö–∞–∫ <—Ä–æ–ª—å>, —è —Ö–æ—á—É <–¥–µ–π—Å—Ç–≤–∏–µ>, —á—Ç–æ–±—ã <—Ü–µ–ª—å>`\n\n"
            "**–ö–Ω–æ–ø–∫–∏:**\n"
            "‚Ä¢ ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥\n"
            "‚Ä¢ üîÑ –í –Ω–∞—á–∞–ª–æ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞\n"
            "‚Ä¢ üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ Jira - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Jira (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
            "‚Ä¢ üîÅ –ò—Å–ø—Ä–∞–≤–∏—Ç—å - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∏—Ç—å User Story\n"
            "‚Ä¢ üíæ –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
            "**–ü—Ä–∏–º–µ—Ä:**\n"
            "`–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —è —Ö–æ—á—É –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º`"
        )

        chat_id = update.effective_chat.id
        self._save_state(chat_id, help_text, self.help_keyboard(), parse_mode='Markdown', state_name="help")

        if update.message:
            await update.message.reply_text(help_text, parse_mode='Markdown', reply_markup=self.help_keyboard())
        else:
            await update.callback_query.edit_message_text(help_text, parse_mode='Markdown', reply_markup=self.help_keyboard())

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        mode = context.user_data.get("mode")

        if mode != "analyze":
            await update.message.reply_text(
                "–ù–∞–∂–º–∏—Ç–µ ¬´–ê–Ω–∞–ª–∏–∑ INVEST¬ª –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å User Story.",
                reply_markup=self.main_menu_keyboard()
            )
            return

        context.user_data["pending_text"] = text

        if not self._is_valid_user_story(text):
            error_text = (
                "‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ User Story. –ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç:\n"
                "`–ö–∞–∫ <—Ä–æ–ª—å>, —è —Ö–æ—á—É <–¥–µ–π—Å—Ç–≤–∏–µ>, —á—Ç–æ–±—ã <—Ü–µ–ª—å>`\n\n"
                "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –∏—Å–ø—Ä–∞–≤–∏–ª —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?"
            )

            chat_id = update.effective_chat.id
            self._save_state(chat_id, error_text, self.invalid_story_keyboard(), parse_mode='Markdown', state_name="invalid_story")

            await update.message.reply_text(
                error_text,
                parse_mode='Markdown',
                reply_markup=self.invalid_story_keyboard()
            )
            return

        await update.message.reply_text("üîé –ò—â—É –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")

        similar_stories = self.db.find_similar(text, threshold=0.7, prefer_golden=True)

        if similar_stories:
            context.user_data["similar_stories"] = similar_stories

            similar_text = "üìö **–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ User Story –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:**\n\n"
            for i, item in enumerate(similar_stories[:3]):
                story = item[0]
                ratio = item[2]
                similar_text += f"**–í–∞—Ä–∏–∞–Ω—Ç {i+1} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {ratio:.0%}):**\n`{story}`\n\n"

            similar_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏:"

            chat_id = update.effective_chat.id
            self._save_state(chat_id, similar_text, self.similar_stories_keyboard(similar_stories, text), state_name="similar_stories")

            await update.message.reply_text(
                similar_text,
                parse_mode='Markdown',
                reply_markup=self.similar_stories_keyboard(similar_stories, text)
            )
            return

        await self._analyze_user_story(update, context, text, show_add_to_db=True, is_callback=False)

    async def _analyze_user_story(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                            user_story: str, show_add_to_db: bool = True, is_callback: bool = False,
                            is_improved: bool = False):
        if is_callback:
            query = update.callback_query
            message_text = "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é..." if is_improved else "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
            await query.edit_message_text(message_text)
        else:
            message_text = "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é..." if is_improved else "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
            await update.message.reply_text(message_text)

        try:
            prompt = build_invest_prompt(user_story)
            llm_response = await self._call_llm(prompt)
            analysis_result = self._extract_llm_text(llm_response)

            logger.info(f"Raw LLM response: {analysis_result}")

            clean_analysis = self._format_brief_analysis(analysis_result)
            logger.info(f"Cleaned analysis: {clean_analysis}")

            score = self._extract_score_from_analysis(clean_analysis)
            context.user_data["last_score"] = score

            context.user_data["last_analysis"] = {
                "story": user_story,
                "analysis": clean_analysis,
                "score": score
            }

            fixed_text = context.user_data.get("fixed_text")
            await self._auto_add_to_quality_story(context, user_story, clean_analysis, fixed_text)

            context.user_data["show_add_to_db"] = show_add_to_db

            result_text = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n\n{clean_analysis}"

            chat_id = update.effective_chat.id
            self._save_state(
                chat_id,
                result_text,
                self.analysis_result_keyboard(show_add_to_db=show_add_to_db, score=score),
                state_name="analysis_result"
            )

            if is_callback:
                await query.edit_message_text(
                    result_text,
                    reply_markup=self.analysis_result_keyboard(show_add_to_db=show_add_to_db, score=score)
                )
            else:
                await update.message.reply_text(
                    result_text,
                    reply_markup=self.analysis_result_keyboard(show_add_to_db=show_add_to_db, score=score)
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

            if is_callback:
                await query.edit_message_text(
                    error_text,
                    reply_markup=self.main_menu_keyboard()
                )
            else:
                await update.message.reply_text(
                    error_text,
                    reply_markup=self.main_menu_keyboard()
                )

    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        data = query.data
        chat_id = query.message.chat.id

        if data == "back":
            await self._handle_back(update, context, chat_id)
            return
        elif data == "close_help":
            await self._handle_close_help(update, context, chat_id)
            return
        elif data == "restart":
            await self._handle_restart(update, context, chat_id)
            return

        handlers = {
            "analyze_invest": self._handle_analyze_invest,
            "help": self.help,
            "fix_with_llm": self._handle_fix_with_llm,
            "use_own": self._handle_use_own,
            "analyze_fixed": self._handle_analyze_fixed,
            "export_menu": self._handle_export_menu,
            "add_to_db": self._add_to_database,
            "jira_copy": self._handle_jira_copy,
            "improve_story": self._improve_story,
            "analyze_improved": self._handle_analyze_improved,
            "improve_again": self._handle_improve_again,
            "export_improved": self._handle_export_improved
        }

        if data.startswith("use_similar_"):
            await self._handle_use_similar(update, context, data)
        elif data.startswith("export_"):
            await self._export_analysis(update, context, data)
            return
        elif data in handlers:
            await handlers[data](update, context)
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    async def _handle_back(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
        history = self.user_history.get(chat_id, [])

        if len(history) > 1:
            history.pop()
            prev_state = history[-1]

            await update.callback_query.edit_message_text(
                text=prev_state["text"],
                reply_markup=prev_state["reply_markup"],
                parse_mode=prev_state.get("parse_mode")
            )
        else:
            await self.start(update, context)

    async def _handle_close_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
        history = self.user_history.get(chat_id, [])

        if len(history) > 1:
            history.pop()
            prev_state = history[-1]

            await update.callback_query.edit_message_text(
                text=prev_state["text"],
                reply_markup=prev_state["reply_markup"],
                parse_mode=prev_state.get("parse_mode")
            )
        else:
            await self.start(update, context)

    async def _handle_restart(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
        self.user_history[chat_id] = []
        await self.start(update, context)

    async def _handle_analyze_invest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        chat_id = query.message.chat.id

        context.user_data["mode"] = "analyze"
        text = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–ö–∞–∫ <—Ä–æ–ª—å>, —è —Ö–æ—á—É <–¥–µ–π—Å—Ç–≤–∏–µ>, —á—Ç–æ–±—ã <—Ü–µ–ª—å>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —è —Ö–æ—á—É –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º`"
        )

        self._save_state(chat_id, text, self.navigation_keyboard(), parse_mode='Markdown', state_name="waiting_user_story")

        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.navigation_keyboard()
        )

    async def _handle_fix_with_llm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_text = context.user_data.get("pending_text", "")

        if not user_text:
            await query.edit_message_text("–ù–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            context.user_data["mode"] = "waiting_correction"
            return

        is_retry = context.user_data.get("fix_retry_count", 0) > 0
        context.user_data["fix_retry_count"] = context.user_data.get("fix_retry_count", 0) + 1

        await self._fix_with_llm(update, context, user_text, is_retry=is_retry)

    async def _handle_use_similar(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
        query = update.callback_query
        idx = int(data.split("_")[2])
        similar_stories = context.user_data.get("similar_stories", [])
        chat_id = query.message.chat.id

        if 0 <= idx < len(similar_stories):
            story = similar_stories[idx][0]
            analysis = similar_stories[idx][1]

            clean_analysis = self._clean_analysis_text(analysis)
            score = self._extract_score_from_analysis(clean_analysis)

            context.user_data["last_analysis"] = {
                "story": story,
                "analysis": clean_analysis,
                "score": score
            }

            result_text = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (–∏–∑ –±–∞–∑—ã):**\n\n{clean_analysis}"

            self._save_state(chat_id, result_text, self.analysis_result_keyboard(show_add_to_db=False, score=score), state_name="analysis_from_db")

            await query.edit_message_text(
                result_text,
                reply_markup=self.analysis_result_keyboard(show_add_to_db=False, score=score)
            )
        else:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ—Ö–æ–∂–µ–π –∏—Å—Ç–æ—Ä–∏–∏.")

    async def _handle_use_own(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        original_text = context.user_data.get("pending_text", "")
        if original_text:
            await self._analyze_user_story(update, context, original_text, show_add_to_db=True, is_callback=True)
        else:
            await update.callback_query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.")

    async def _handle_analyze_fixed(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        fixed_text = context.user_data.get("fixed_text", "")
        if fixed_text:
            await self._analyze_user_story(update, context, fixed_text, show_add_to_db=True, is_callback=True)
        else:
            await update.callback_query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.")

    async def _handle_export_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        chat_id = query.message.chat.id

        export_text = "üì§ **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:**\n\n–§–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç."

        self._save_state(chat_id, export_text, self.export_menu_keyboard(), parse_mode='Markdown', state_name="export_menu")

        await query.edit_message_text(
            export_text,
            parse_mode='Markdown',
            reply_markup=self.export_menu_keyboard()
        )

    async def _handle_jira_copy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        chat_id = query.message.chat.id

        jira_text = (
            "‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Jira –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
            "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        )

        show_add_to_db = context.user_data.get("show_add_to_db", True)
        self._save_state(chat_id, jira_text, self.analysis_result_keyboard(show_add_to_db=show_add_to_db), state_name="jira_error")

        await query.edit_message_text(
            jira_text,
            reply_markup=self.analysis_result_keyboard(show_add_to_db=show_add_to_db)
        )

    async def _fix_with_llm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, is_retry: bool = False):
        query = update.callback_query

        if not is_retry:
            await query.edit_message_text("üîé –ò—â—É –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")

            similar_stories = self.db.find_similar(text, threshold=0.7, prefer_golden=True)

            if similar_stories:
                context.user_data["similar_stories"] = similar_stories

                similar_text = "üìö **–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ User Story –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:**\n\n"
                for i, item in enumerate(similar_stories[:3]):
                    story, answer, ratio, score = item
                    similar_text += f"**–í–∞—Ä–∏–∞–Ω—Ç {i+1} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {ratio:.0%}):**\n`{story}`\n\n"

                similar_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"

                chat_id = update.callback_query.message.chat.id
                self._save_state(chat_id, similar_text, self.similar_stories_keyboard(similar_stories, text), state_name="similar_stories_fix")

                await query.edit_message_text(
                    similar_text,
                    parse_mode='Markdown',
                    reply_markup=self.similar_stories_keyboard(similar_stories, text)
                )
                return

        await query.edit_message_text("ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É LLM...")

        try:
            prompt = build_fix_prompt(text)
            llm_response = await self._call_llm(prompt)
            fixed_text = self._extract_llm_text(llm_response)

            if not fixed_text or len(fixed_text.strip()) < 10:
                raise ValueError("LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç")

            improved_text = await self._check_and_improve_story(text, fixed_text)
            if improved_text != fixed_text:
                logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ —É–ª—É—á—à–µ–Ω–∞: {fixed_text} -> {improved_text}")
                fixed_text = improved_text

            context.user_data["fixed_text"] = fixed_text

            is_valid = self._is_valid_user_story(fixed_text)
            validity_status = "‚úÖ –í–∞–ª–∏–¥–Ω–∞—è user story" if is_valid else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"

            result_text = (
                f"‚úÖ **–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:**\n\n"
                f"`{fixed_text}`\n\n"
                f"**{validity_status}**\n\n"
                f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ INVEST?"
            )

            chat_id = update.callback_query.message.chat.id
            self._save_state(chat_id, result_text, self.fix_result_keyboard(), parse_mode='Markdown', state_name="fix_result")

            await query.edit_message_text(
                result_text,
                parse_mode='Markdown',
                reply_markup=self.fix_result_keyboard()
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.",
                reply_markup=self.invalid_story_keyboard()
            )

    async def _export_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE, format_type: str):
        query = update.callback_query
        await query.answer()

        logger.info(f"=== EXPORT CALLED ===")
        logger.info(f"Format type: {format_type}")

        analysis_data = context.user_data.get("last_analysis")

        if not analysis_data:
            logger.error("No analysis data found for export")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        story = analysis_data["story"]
        analysis = analysis_data["analysis"]
        score = analysis_data.get("score", 0)

        logger.info(f"Exporting story: {story[:50]}...")

        try:
            if format_type == "export_txt":
                content = f"User Story:\n{story}\n\n–ê–Ω–∞–ª–∏–∑ INVEST:\n{analysis}"
                filename = "user_story_analysis.txt"
                format_name = "TXT"
            else:
                story_escaped = story.replace('"', '""')
                analysis_escaped = analysis.replace('"', '""')
                content = f'"User Story";"–ê–Ω–∞–ª–∏–∑ INVEST"\n"{story_escaped}";"{analysis_escaped}"'
                filename = "user_story_analysis.csv"
                format_name = "CSV"

            file_buffer = io.BytesIO(content.encode('utf-8'))
            file_buffer.seek(0)

            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=InputFile(file_buffer, filename=filename),
                caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_name}"
            )

            success_text = f"‚úÖ –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_name} –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç"

            chat_id = query.message.chat_id
            show_add_to_db = context.user_data.get("show_add_to_db", True)

            self._save_state(
                chat_id,
                success_text,
                self.analysis_result_keyboard(show_add_to_db=show_add_to_db, score=score),
                state_name="export_success"
            )

            await query.edit_message_text(
                success_text,
                reply_markup=self.analysis_result_keyboard(show_add_to_db=show_add_to_db, score=score)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}"
            await query.edit_message_text(error_text)

    async def _add_to_database(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        analysis_data = context.user_data.get("last_analysis")

        if not analysis_data:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É.")
            return

        story = analysis_data["story"]
        analysis = analysis_data["analysis"]

        try:
            norm_text = normalize_text(story)
            self.db.add_example(story, norm_text, analysis, is_golden=False, score=0)

            success_text = (
                "‚úÖ User Story –∏ –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n"
                "–¢–µ–ø–µ—Ä—å –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –≤ –±—É–¥—É—â–µ–º."
            )

            chat_id = query.message.chat.id
            self._save_state(chat_id, success_text, self.analysis_result_keyboard(show_add_to_db=False), state_name="add_to_db_success")

            await query.edit_message_text(
                success_text,
                reply_markup=self.analysis_result_keyboard(show_add_to_db=False)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=self.analysis_result_keyboard(show_add_to_db=True)
            )

    def _is_valid_user_story(self, text: str) -> bool:
        text_lower = text.lower().strip()

        pattern = r'–∫–∞–∫\s+[^,]+\s*,\s*—è\s+(—Ö–æ—á—É|–º–æ–≥—É|–Ω—É–∂–Ω–æ)\s+[^,]+\s*,\s*—á—Ç–æ–±—ã\s+.+'
        has_structure = re.search(pattern, text_lower) is not None

        has_min_length = len(text_lower) > 25
        has_meaning = any(word in text_lower for word in ["—Ö–æ—á—É", "–º–æ–≥—É", "–Ω—É–∂–Ω–æ"])

        return has_structure and has_min_length and has_meaning

    async def _call_llm(self, messages):
        try:
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None,
                lambda: self.llm_client.chat(messages)
            )
            return self._extract_llm_text(result)
        except Exception as e:
            logger.error(f"LLM call error: {e}")
            raise

    def _extract_llm_text(self, response) -> str:
        if isinstance(response, str):
            return response

        if isinstance(response, dict):
            if 'choices' in response and response['choices']:
                choice = response['choices'][0]
                if 'message' in choice and 'content' in choice['message']:
                    return choice['message']['content']
                elif 'text' in choice:
                    return choice['text']
            elif 'text' in response:
                return response['text']

        return str(response)

    def _clean_analysis_text(self, analysis_text: str) -> str:
        if len(analysis_text.strip()) < 300:
            return analysis_text.strip()

        clean_text = analysis_text

        clean_text = re.sub(r'(system|user|assistant):\s*', '', clean_text, flags=re.IGNORECASE)
        clean_text = re.sub(r'[\{\}\[\]]', '', clean_text)
        clean_text = re.sub(r'[*#\-_`]', '', clean_text)

        lines = clean_text.split('\n')
        clean_lines = []

        for line in lines:
            line = line.strip()
            if not line:
                continue
            if any(tech in line.lower() for tech in ['json', 'role:', 'content:', '```']):
                continue
            if len(line) > 10:
                clean_lines.append(line)

        clean_text = '\n'.join(clean_lines)

        if len(clean_text) > 500:
            lines = clean_text.split('\n')
            if len(lines) > 8:
                clean_text = '\n'.join(lines[:8]) + "\n..."
            elif len(clean_text) > 500:
                clean_text = clean_text[:497] + "..."

        return clean_text.strip()

    def _format_brief_analysis(self, analysis_text: str) -> str:
        if "–û—Ü–µ–Ω–∫–∞:" in analysis_text and any(marker in analysis_text for marker in ["I:", "N:", "V:"]):
            return analysis_text

        score = None
        criteria = {"I": "?", "N": "?", "V": "?", "E": "?", "S": "?", "T": "?"}
        recommendations = []

        lines = analysis_text.split('\n')

        for line in lines:
            line_lower = line.lower()
            if any(word in line_lower for word in ['–æ—Ü–µ–Ω–∫–∞', '–±–∞–ª–ª', 'score']):
                numbers = re.findall(r'\d+', line)
                if numbers:
                    score = numbers[0]
                    if len(numbers) > 1:
                        score = f"{numbers[0]}/{numbers[1]}"
                    else:
                        score = f"{numbers[0]}/6"
                break

        for line in lines:
            line_lower = line.lower()

            criteria_patterns = {
                "I": ['independent', '–Ω–µ–∑–∞–≤–∏—Å–∏–º'],
                "N": ['negotiable', '–æ–±—Å—É–∂–¥–∞–µ–º'],
                "V": ['valuable', '—Ü–µ–Ω–Ω'],
                "E": ['estimable', '–æ—Ü–µ–Ω–∏–≤–∞'],
                "S": ['small', '–º–∞–ª–µ–Ω—å–∫'],
                "T": ['testable', '—Ç–µ—Å—Ç–∏—Ä—É–µ–º']
            }

            for criterion, patterns in criteria_patterns.items():
                if any(pattern in line_lower for pattern in patterns):
                    if any(good in line_lower for good in ['—Ö–æ—Ä–æ—à', 'good', '–¥–∞', 'yes', '‚úì', '+']):
                        criteria[criterion] = "‚úì"
                    elif any(bad in line_lower for bad in ['–ø–ª–æ—Ö', 'bad', '–Ω–µ—Ç', 'no', '‚úó', '-']):
                        criteria[criterion] = "‚úó"

        for line in lines:
            line_clean = line.strip()
            if any(word in line_clean.lower() for word in ['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü', '—Å–æ–≤–µ—Ç', 'recommend', '—É–ª—É—á—à', 'improve']):
                if len(line_clean) > 20 and not line_clean.endswith(':'):
                    rec_text = re.sub(r'^[‚Ä¢\-*\d\.\s]+', '', line_clean)
                    if rec_text and len(rec_text) > 10 and len(recommendations) < 3:
                        recommendations.append(rec_text)
            elif line_clean.startswith(('‚Ä¢', '-', '*', '1.', '2.', '3.')):
                rec_text = re.sub(r'^[‚Ä¢\-*\d\.\s]+', '', line_clean)
                if rec_text and len(rec_text) > 10 and len(recommendations) < 3:
                    recommendations.append(rec_text)

        result_lines = ["üìä **–ê–Ω–∞–ª–∏–∑ INVEST:**"]

        if score:
            result_lines.append(f"‚≠ê –û—Ü–µ–Ω–∫–∞: {score}")
        else:
            result_lines.append("‚≠ê –û—Ü–µ–Ω–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        criteria_line = "üîç –ö—Ä–∏—Ç–µ—Ä–∏–∏: "
        criteria_line += f"I:{criteria['I']} N:{criteria['N']} V:{criteria['V']} "
        criteria_line += f"E:{criteria['E']} S:{criteria['S']} T:{criteria['T']}"
        result_lines.append(criteria_line)

        if recommendations:
            result_lines.append("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in recommendations:
                if len(rec) > 100:
                    rec = rec[:97] + "..."
                result_lines.append(f"‚Ä¢ {rec}")

        result = '\n'.join(result_lines)

        if len(result) < 100 and len(analysis_text) > 200:
            return self._clean_analysis_text(analysis_text)

        return result

    def run(self):
        logger.info("Starting bot...")

        self.app.add_error_handler(self.error_handler)

        self.app.run_polling()

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.error(f"Exception while handling an update: {context.error}")

        try:
            if update and update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

    async def _check_and_improve_story(self, original_story: str, fixed_story: str, max_attempts: int = 2) -> str:
        if not self._is_valid_user_story(fixed_story):
            if max_attempts > 0:
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–æ–±—É–µ–º —É–ª—É—á—à–∏—Ç—å (–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {max_attempts})")
                prompt = build_fix_prompt(original_story)
                new_fixed = await self._call_llm(prompt)
                new_fixed_text = self._extract_llm_text(new_fixed)
                return await self._check_and_improve_story(original_story, new_fixed_text, max_attempts - 1)
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                return fixed_story

        if len(fixed_story.split(',')) < 2 or "—Ö–æ—á—É" not in fixed_story.lower() or "—á—Ç–æ–±—ã" not in fixed_story.lower():
            if max_attempts > 0:
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –æ–±—â–∞—è, –ø—Ä–æ–±—É–µ–º —É–ª—É—á—à–∏—Ç—å (–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {max_attempts})")
                specific_prompt = [
                    {
                        "role": "system",
                        "content": "–°–¥–µ–ª–∞–π —ç—Ç—É user story –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π INVEST. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–æ–ª—å, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –∏–∑–º–µ—Ä–∏–º–∞—è —Ü–µ–ª—å."
                    },
                    {
                        "role": "user",
                        "content": f"–°–¥–µ–ª–∞–π –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π: {fixed_story}"
                    }
                ]
                new_fixed = await self._call_llm(specific_prompt)
                new_fixed_text = self._extract_llm_text(new_fixed)
                return await self._check_and_improve_story(original_story, new_fixed_text, max_attempts - 1)

        return fixed_story

    def _extract_score_from_analysis(self, analysis_text: str) -> int:
        lines = analysis_text.split('\n')
        for line in lines:
            line_lower = line.lower()
            if any(word in line_lower for word in ['–æ—Ü–µ–Ω–∫–∞', '–±–∞–ª–ª', 'score']):
                numbers = []
                current_number = ""
                for char in line:
                    if char.isdigit():
                        current_number += char
                    elif current_number:
                        numbers.append(int(current_number))
                        current_number = ""
                if current_number:
                    numbers.append(int(current_number))

                if numbers:
                    return min(numbers[0], 6)
        return 0

    def _is_high_quality_story(self, analysis_text: str, fixed_text: str = None) -> bool:
        score = self._extract_score_from_analysis(analysis_text)

        is_high_score = score >= 5
        is_valid = fixed_text and self._is_valid_user_story(fixed_text)
        has_content = len(analysis_text.strip()) > 100

        return is_high_score and is_valid and has_content

    async def _auto_add_to_quality_story(self, context: ContextTypes.DEFAULT_TYPE, story: str, analysis: str, fixed_text: str = None):
        try:
            if self._is_high_quality_story(analysis, fixed_text):
                score = self._extract_score_from_analysis(analysis)
                norm_text = normalize_text(story)

                self.db.add_example(story, norm_text, analysis, is_golden=True, score=score)
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É: {story} (–æ—Ü–µ–Ω–∫–∞: {score})")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∑–æ–ª–æ—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é: {e}")

        return False

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        stats = self.db.get_statistics()

        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:**\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ç–æ—Ä–∏–π: {stats['total_stories']}\n"
            f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π: {stats['golden_stories']}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['average_score']}/6\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats['total_usage']}\n\n"
            "‚ú® –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∏—Ç—Å—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö!"
        )

        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def _improve_story(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        original_story = context.user_data.get("pending_text", "")
        if not original_story:
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
            return

        await query.edit_message_text("üîé –ò—â—É –ø–æ—Ö–æ–∂–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑–µ...")

        similar_stories = self.db.find_similar(original_story, threshold=0.7, prefer_golden=True)

        if similar_stories:
            context.user_data["similar_stories"] = similar_stories

            similar_text = "üìö **–ù–∞–π–¥–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ User Story –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:**\n\n"
            for i, item in enumerate(similar_stories[:3]):
                story, answer, ratio, score = item
                score_display = f"–æ—Ü–µ–Ω–∫–∞: {score}/6, " if score > 0 else ""
                similar_text += f"**–í–∞—Ä–∏–∞–Ω—Ç {i+1} ({score_display}—Å—Ö–æ–¥—Å—Ç–≤–æ: {ratio:.0%}):**\n`{story}`\n\n"

            similar_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ —É–ª—É—á—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é:"

            chat_id = update.callback_query.message.chat.id
            self._save_state(chat_id, similar_text, self.similar_stories_keyboard(similar_stories, original_story), state_name="similar_stories_improve")

            await query.edit_message_text(
                similar_text,
                parse_mode='Markdown',
                reply_markup=self.similar_stories_keyboard(similar_stories, original_story)
            )
            return

        await query.edit_message_text("‚ú® –£–ª—É—á—à–∞—é –∏—Å—Ç–æ—Ä–∏—é –¥–æ –∫–∞—á–µ—Å—Ç–≤–∞ 5/6+...")

        try:
            improve_prompt = build_improve_prompt(original_story)

            llm_response = await self._call_llm(improve_prompt)
            improved_story = self._extract_llm_text(llm_response).strip()

            if not self._is_valid_user_story(improved_story):
                retry_prompt = [
                    {
                        "role": "system",
                        "content": "–ò—Å–ø—Ä–∞–≤—å User Story —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ö–∞–∫ <—Ä–æ–ª—å>, —è —Ö–æ—á—É <–¥–µ–π—Å—Ç–≤–∏–µ>, —á—Ç–æ–±—ã <—Ü–µ–ª—å>'. –¢–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."
                    },
                    {
                        "role": "user",
                        "content": f"–ò—Å–ø—Ä–∞–≤—å —Ñ–æ—Ä–º–∞—Ç: {improved_story}"
                    }
                ]
                llm_response = await self._call_llm(retry_prompt)
                improved_story = self._extract_llm_text(llm_response).strip()

            context.user_data["pending_text"] = improved_story
            context.user_data["improved_story"] = improved_story

            improved_text = (
                "‚ú® **–£–ª—É—á—à–µ–Ω–Ω–∞—è User Story:**\n\n"
                f"`{improved_story}`\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç?"
            )

            chat_id = update.callback_query.message.chat.id
            self._save_state(chat_id, improved_text, self.improved_story_keyboard(), parse_mode='Markdown', state_name="improved_story_preview")

            await query.edit_message_text(
                improved_text,
                parse_mode='Markdown',
                reply_markup=self.improved_story_keyboard()
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.analysis_result_keyboard(show_add_to_db=True)
            )

    async def _handle_improve_again(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        current_story = context.user_data.get("improved_story", context.user_data.get("pending_text", ""))

        if not current_story:
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
            return

        context.user_data["pending_text"] = current_story

        await self._improve_story(update, context)

    async def _handle_analyze_improved(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        improved_story = context.user_data.get("improved_story", "")
        if not improved_story:
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        await self._analyze_user_story(update, context, improved_story, show_add_to_db=True, is_callback=True, is_improved=True)

    async def _handle_export_improved(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        improved_story = context.user_data.get("improved_story", "")
        if not improved_story:
            await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        context.user_data["last_analysis"] = {
            "story": improved_story,
            "analysis": "‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è User Story (–µ—â–µ –Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞)",
            "score": 0
        }

        await self._handle_export_menu(update, context)
