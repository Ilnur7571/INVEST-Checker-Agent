import io
import logging
import re

from bot import LRUCache
from datetime import datetime
from telegram import Update, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from telegram.error import BadRequest
from keyboards import (
    main_menu_keyboard,
    help_keyboard,
    navigation_keyboard,
    similar_stories_keyboard,
    analysis_result_keyboard,
    improved_story_keyboard,
    export_menu_keyboard,
    improvement_history_keyboard,
    database_keyboard,
    database_story_keyboard,
)

from utils import (
    normalize_text,
    build_invest_prompt,
    build_fix_prompt,
    build_improve_prompt,
    extract_score_from_analysis,
    safe_truncate_text,
    should_show_add_to_db_button,
    format_analysis_for_display,
)

logger = logging.getLogger("handlers")

# –ö—ç—à –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ User Stories
_user_story_cache = LRUCache(max_size=1000, ttl=3600)    #Dict[str, bool] = {}

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
class ImprovementChain:
    def __init__(self):
        self.versions = []

    def add_version(self, story: str, analysis: str = None, timestamp: str = None):
        if timestamp is None:
            timestamp = datetime.now().isoformat()
        self.versions.append({
            'story': story,
            'analysis': analysis,
            'timestamp': timestamp,
            'version': len(self.versions) + 1
        })

    def get_initial(self):
        return self.versions[0] if self.versions else None

    def get_latest(self):
        return self.versions[-1] if self.versions else None

    def get_all_versions(self):
        return self.versions

    def get_version_count(self):
        return len(self.versions)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotState:
    MAIN_MENU = "main_menu"
    ANALYZING = "analyzing"
    SHOWING_RESULTS = "showing_results"
    SHOWING_SIMILAR = "showing_similar"
    IMPROVING = "improving"
    EXPORT_MENU = "export_menu"
    HELP = "help"
    STATS = "stats"
    SHOWING_HISTORY = "showing_history"
    SHOWING_DATABASE = "showing_database"
    SHOWING_STORY_DETAILS = "showing_story_details"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = update.effective_user.id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ bot_data
        if 'user_history' not in context.bot_data:
            context.bot_data['user_history'] = {}
        if 'stats' not in context.bot_data:
            context.bot_data['stats'] = {
                'total_messages': 0,
                'user_sessions': 0
            }

        if user_id not in context.bot_data['user_history']:
            context.bot_data['user_history'][user_id] = []
            context.bot_data['stats']['user_sessions'] += 1

        welcome_text = (
            "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ INVEST-Checker!**\n\n"
            "–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ User Stories –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º INVEST:\n\n"
            "‚Ä¢ *I*ndependent (–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è)\n"
            "‚Ä¢ *N*egotiable (–æ–±—Å—É–∂–¥–∞–µ–º–∞—è)\n"
            "‚Ä¢ *V*aluable (—Ü–µ–Ω–Ω–∞—è)\n"
            "‚Ä¢ *E*stimable (–æ—Ü–µ–Ω–∏–≤–∞–µ–º–∞—è)\n"
            "‚Ä¢ *S*mall (–º–∞–ª–µ–Ω—å–∫–∞—è)\n"
            "‚Ä¢ *T*estable (—Ç–µ—Å—Ç–∏—Ä—É–µ–º–∞—è)\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "_–ö–∞–∫ <—Ä–æ–ª—å>, —è —Ö–æ—á—É <–¥–µ–π—Å—Ç–≤–∏–µ>, —á—Ç–æ–±—ã <—Ü–µ–ª—å>_"
        )

        await update.message.reply_text(
            welcome_text,
            reply_markup=main_menu_keyboard(),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        help_text = (
            "üìñ **–ü–æ–º–æ—â—å –ø–æ INVEST-Checker**\n\n"
            "*INVEST –∫—Ä–∏—Ç–µ—Ä–∏–∏:*\n"
            "‚Ä¢ *I* - –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è (Independent)\n"
            "‚Ä¢ *N* - –û–±—Å—É–∂–¥–∞–µ–º–∞—è (Negotiable) \n"
            "‚Ä¢ *V* - –¶–µ–Ω–Ω–∞—è (Valuable)\n"
            "‚Ä¢ *E* - –û—Ü–µ–Ω–∏–≤–∞–µ–º–∞—è (Estimable)\n"
            "‚Ä¢ *S* - –ú–∞–ª–µ–Ω—å–∫–∞—è (Small)\n"
            "‚Ä¢ *T* - –¢–µ—Å—Ç–∏—Ä—É–µ–º–∞—è (Testable)\n\n"
            "*–§–æ—Ä–º–∞—Ç User Story:*\n"
            "```\n–ö–∞–∫ <—Ä–æ–ª—å>, —è —Ö–æ—á—É <–¥–µ–π—Å—Ç–≤–∏–µ>, —á—Ç–æ–±—ã <—Ü–µ–ª—å>\n```\n"
            "*–ü—Ä–∏–º–µ—Ä:*\n"
            "_–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —è —Ö–æ—á—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ email, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É._\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"
        )

        await update.message.reply_text(
            help_text,
            reply_markup=help_keyboard(),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"Error in help handler: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏.",
            reply_markup=navigation_keyboard()
        )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        bot = context.bot_data['bot']
        db = context.bot_data['db']
        llm_client = context.bot_data['llm_client']
        
        stats_data = await bot.get_bot_stats(db, llm_client)

        stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*\n\n"

        if 'error' in stats_data:
            stats_text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        else:
            stats_text += (
                f"‚Ä¢ ‚è± –ê–ø—Ç–∞–π–º: {stats_data.get('uptime', 'N/A')}\n"
                f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_data.get('active_users', 0)}\n"
                f"‚Ä¢ üìö –í—Å–µ–≥–æ –∏—Å—Ç–æ—Ä–∏–π: {stats_data.get('total_stories', 0)}\n"
                f"‚Ä¢ ‚≠ê –ó–æ–ª–æ—Ç—ã—Ö –∏—Å—Ç–æ—Ä–∏–π: {stats_data.get('golden_stories', 0)}\n"
                f"‚Ä¢ üìà –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {stats_data.get('total_messages', 0)}\n"
                f"‚Ä¢ üéØ –°—Ä–µ–¥–Ω–∏–π score: {stats_data.get('average_score', 0):.2f}\n"
                f"‚Ä¢ üíæ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {stats_data.get('cache_hit_rate', 0):.1%}"
            )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É LLM –∫–ª–∏–µ–Ω—Ç–∞
        llm_stats = llm_client.get_stats()
        stats_text += "\n\nü§ñ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LLM:*\n"
        stats_text += f"‚Ä¢ üìû –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {llm_stats.get('total_requests', 0)}\n"
        stats_text += f"‚Ä¢ üíæ –ö—ç—à —Ç–æ–∫–µ–Ω–æ–≤: {llm_stats.get('token_cache_hit_rate', 0):.1%}\n"
        stats_text += f"‚Ä¢ ‚ö° –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤: {llm_stats.get('response_cache_size', 0)} –∑–∞–ø–∏—Å–µ–π\n"
        stats_text += f"‚Ä¢ üì® –¢–æ–∫–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {llm_stats.get('total_tokens_sent', 0)}\n"
        stats_text += f"‚Ä¢ üì© –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω–æ: {llm_stats.get('total_tokens_received', 0)}"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.message:
            await update.message.reply_text(
                stats_text,
                reply_markup=navigation_keyboard(),
                parse_mode='Markdown'
            )
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                stats_text,
                reply_markup=navigation_keyboard(),
                parse_mode='Markdown'
            )

    except Exception as e:
        logger.error(f"Error in stats handler: {e}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."

        if update.message:
            await update.message.reply_text(error_msg, reply_markup=navigation_keyboard())
        elif update.callback_query:
            await update.callback_query.edit_message_text(error_msg, reply_markup=navigation_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = update.message.text.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['initial_story'] = text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
        cache_key = f"analysis_{hash(text.lower().strip())}"
        cached_analysis = context.bot_data.get('analysis_cache', {}).get(cache_key)

        if cached_analysis:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à
            if 'bot' in context.bot_data:
                context.bot_data['bot'].stats['cache_hits'] += 1
            logger.info("Using cached analysis for user story")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            context.user_data['last_analysis'] = cached_analysis
            keyboard = analysis_result_keyboard(
                show_add_to_db=should_show_add_to_db_button(cached_analysis['analysis']),
                has_improvement_history='improvement_chain' in context.user_data,
                analysis_text=cached_analysis['analysis']
            )

            response_text = format_analysis_for_display(cached_analysis['analysis'], text)
            await update.message.reply_text(
                response_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞
        if 'bot' in context.bot_data:
            context.bot_data['bot'].stats['cache_misses'] += 1

        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if not _is_valid_user_story(text):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Ö–æ—Ç—å –Ω–µ–º–Ω–æ–≥–æ –Ω–∞ User Story
            text_lower = text.lower()
            has_structure = any(word in text_lower for word in ["–∫–∞–∫", "—Ö–æ—á—É", "—á—Ç–æ–±—ã", "—á—Ç–æ –±—ã", "–º–Ω–µ –Ω—É–∂–Ω–æ"])

            if has_structure and len(text) > 15:
                # –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ, –Ω–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é - –≤—Å–µ —Ä–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                await update.message.reply_text(
                    "‚ö†Ô∏è –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è, –Ω–æ —è –ø–æ–ø—Ä–æ–±—É—é –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...",
                    reply_markup=main_menu_keyboard()
                )
                await _analyze_user_story(update, context, text)
            else:
                await update.message.reply_text(
                    "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ User Story.\n\n*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:*\n"
                    "_–ö–∞–∫ <—Ä–æ–ª—å>, —è —Ö–æ—á—É <–¥–µ–π—Å—Ç–≤–∏–µ>, —á—Ç–æ–±—ã <—Ü–µ–ª—å>_\n\n"
                    "*–ü—Ä–∏–º–µ—Ä:*\n"
                    "_–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —è —Ö–æ—á—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ._\n\n"
                    "*–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:*\n"
                    "‚Ä¢ –ö–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä, –º–Ω–µ –Ω—É–∂–Ω–æ –≤–∏–¥–µ—Ç—å –æ—Ç—á–µ—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è\n"
                    "‚Ä¢ –ö–∞–∫ –∫–ª–∏–µ–Ω—Ç, —è –º–æ–≥—É —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π",
                    reply_markup=main_menu_keyboard(),
                    parse_mode='Markdown'
                )
        else:
            await _analyze_user_story(update, context, text)

    except Exception as e:
        logger.error(f"Error in message handler: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.",
            reply_markup=navigation_keyboard()
        )

def _is_valid_user_story(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ User Story —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if len(text) > 2000:  # —É–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º LRUCache –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    cache_key = text.lower().strip()
    cached_result = _user_story_cache.get(cache_key)
    if cached_result is not None:
        return cached_result

    # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    patterns = [
        r"^–∫–∞–∫\s+.+?,\s*—è\s+—Ö–æ—á—É\s+.+?,\s*—á—Ç–æ–±—ã\s+.+?$",  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
        r"^–∫–∞–∫\s+.+?,\s*—è\s+—Ö–æ—á—É\s+.+?,\s*—á—Ç–æ\s+–±—ã\s+.+?$",  # —Å –æ–ø–µ—á–∞—Ç–∫–æ–π
        r"^–∫–∞–∫\s+.+?,\s*–º–Ω–µ\s+–Ω—É–∂–Ω–æ\s+.+?,\s*—á—Ç–æ–±—ã\s+.+?$",  # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞
        r"^–∫–∞–∫\s+.+?,\s*—è\s+–º–æ–≥—É\s+.+?,\s*—á—Ç–æ–±—ã\s+.+?$",  # –µ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç
    ]

    text_lower = text.lower().strip()
    is_valid = any(re.match(pattern, text_lower) for pattern in patterns)

    # –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–æ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
    if not is_valid:
        keywords = ["–∫–∞–∫", "—Ö–æ—á—É", "—á—Ç–æ–±—ã"]
        has_keywords = all(keyword in text_lower for keyword in keywords) or \
                     ("–∫–∞–∫" in text_lower and "—Ö–æ—á—É" in text_lower and "—á—Ç–æ –±—ã" in text_lower)

        if has_keywords and len(text_lower) > 20:  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
            is_valid = True

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (LRUCache –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–º –∏ TTL)
    _user_story_cache.set(cache_key, is_valid)

    return is_valid

async def _analyze_user_story(update: Update, context: ContextTypes.DEFAULT_TYPE,
                             user_story: str, show_add_to_db: bool = False,
                             is_improved: bool = False, is_callback: bool = False,
                             skip_similar_search: bool = False) -> None:
    """–ê–Ω–∞–ª–∏–∑ User Story —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø–æ—Ö–æ–∂–∏—Ö –∏—Å—Ç–æ—Ä–∏–π"""
    try:
        db = context.bot_data['db']
        llm_client = context.bot_data['llm_client']
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
        if len(user_story) > 2000:
            error_msg = "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤."
            if is_callback:
                await update.callback_query.edit_message_text(error_msg, reply_markup=navigation_keyboard())
            else:
                await update.message.reply_text(error_msg, reply_markup=navigation_keyboard())
            return

        norm = normalize_text(user_story)
        logger.info(f"Analyzing user story: {user_story[:100]}...")

        # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö (–æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
        similar_high = []
        similar_medium = []
        similar_low = []
        
        if not skip_similar_search:
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
            similar_high = await db.find_similar(user_story, threshold=0.95)  # –û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ
            similar_medium = await db.find_similar(user_story, threshold=0.75)  # –ü–æ—Ö–æ–∂–∏–µ
            similar_low = await db.find_similar(user_story, threshold=0.60)  # –°–ª–∞–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

            logger.info(f"Search results - High: {len(similar_high)}, Medium: {len(similar_medium)}, Low: {len(similar_low)}")

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ò–î–ï–ù–¢–ò–ß–ù–´–ï –∏—Å—Ç–æ—Ä–∏–∏ (95%+), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –±–µ–∑ LLM
            if similar_high and not is_improved:
                best_match = similar_high[0]  # –ë–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ—Ö–æ–∂—É—é
                story, answer, ratio, score = best_match

                logger.info(f"Found highly similar story: {ratio:.1%} - {story[:50]}...")

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                await db.increment_usage_count(normalize_text(story))

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è User Story
                formatted_answer = format_analysis_for_display(answer)

                response_text = (
                    f"üéØ **–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤ –±–∞–∑–µ** ({ratio:.0%} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)\n\n"
                    f"**User Story:**\n_{story}_\n\n{formatted_answer}"
                )

                # –î–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—É–∂–µ –≤ –±–∞–∑–µ)
                keyboard = analysis_result_keyboard(
                    show_add_to_db=False,
                    has_improvement_history='improvement_chain' in context.user_data,
                    analysis_text=formatted_answer
                )

                if is_callback:
                    await update.callback_query.edit_message_text(
                        response_text,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        response_text,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –∫—ç—à
                _add_to_user_history(context, user_id, story, formatted_answer)
                _cache_analysis(context, story, {
                    'story': story,
                    'analysis': formatted_answer,
                    'timestamp': datetime.now().isoformat()
                })

                context.user_data['last_analysis'] = {
                    'story': story,
                    'analysis': formatted_answer,
                    'timestamp': datetime.now().isoformat()
                }
                return

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏—Ö –∏—Å—Ç–æ—Ä–∏–π (75%+), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞
            elif similar_medium and not is_improved:
                logger.info(f"Found {len(similar_medium)} similar stories, showing selection")
                
                # –ë–µ—Ä–µ–º —Ç–æ–ø-3 —Å–∞–º—ã–µ –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
                top_similar = similar_medium[:3]
                
                keyboard = similar_stories_keyboard(top_similar, user_story)
                message_text = (
                    f"üîç **–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑–µ** (—Å—Ö–æ–¥—Å—Ç–≤–æ –æ—Ç {top_similar[0][2]:.0%}):\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –≤–∞—à–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:"
                )

                if is_callback:
                    await update.callback_query.edit_message_text(
                        message_text,
                        reply_markup=keyboard
                    )
                else:
                    await update.message.reply_text(
                        message_text,
                        reply_markup=keyboard
                    )

                context.user_data['similar_stories'] = top_similar
                context.user_data['original'] = user_story
                return

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–∞–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (60%+), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ª—É—á—à–∏—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            elif similar_low and not is_improved:
                logger.info(f"Found {len(similar_low)} weak matches, offering improvement")
                
                keyboard = similar_stories_keyboard(similar_low[:2], user_story)
                message_text = (
                    f"üîç **–ù–∞–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—Ä–∏–∏** (—Å—Ö–æ–¥—Å—Ç–≤–æ –æ—Ç {similar_low[0][2]:.0%}):\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö, —É–ª—É—á—à–∏—Ç—å –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ –ò–ò –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:"
                )

                if is_callback:
                    await update.callback_query.edit_message_text(
                        message_text,
                        reply_markup=keyboard
                    )
                else:
                    await update.message.reply_text(
                        message_text,
                        reply_markup=keyboard
                    )

                context.user_data['similar_stories'] = similar_low[:2]
                context.user_data['original'] = user_story
                return

        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö –≤ –±–∞–∑–µ –ò–õ–ò –º—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø–æ–∏—Å–∫ (use_own) - –∏–¥–µ–º –≤ LLM
        logger.info("No similar stories found or skipping search, using LLM analysis")
        analysis_msg = None
        if is_callback:
            await update.callback_query.edit_message_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é...")
        else:
            analysis_msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é...")

        try:
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ LLM
            prompt = build_invest_prompt(user_story)
            response = await llm_client.get_chat_completion(prompt)

            # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –û–¢ LLM
            answer_text = ""
            if isinstance(response, tuple) and len(response) >= 1:
                answer_text = response[0]
            elif isinstance(response, str):
                answer_text = response
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ tuple –∏ –Ω–µ str, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                answer_text = str(response)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞
            if not isinstance(answer_text, str):
                logger.warning(f"Unexpected response type from LLM: {type(answer_text)}")
                answer_text = str(answer_text)
            
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            answer_text = answer_text.strip()

            analysis = format_analysis_for_display(answer_text, user_story)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É
            should_show_add_button = should_show_add_to_db_button(analysis, is_improved)

            keyboard = analysis_result_keyboard(
                show_add_to_db=should_show_add_button,
                has_improvement_history='improvement_chain' in context.user_data,
                analysis_text=analysis
            )

            if is_callback:
                await update.callback_query.edit_message_text(
                    analysis,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            else:
                await analysis_msg.edit_text(
                    analysis,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –∫—ç—à
            _add_to_user_history(context, user_id, user_story, analysis)
            _cache_analysis(context, user_story, {
                'story': user_story,
                'analysis': analysis,
                'timestamp': datetime.now().isoformat()
            })

            context.user_data['last_analysis'] = {
                'story': user_story,
                'analysis': analysis,
                'timestamp': datetime.now().isoformat()
            }

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ golden
            if is_improved and extract_score_from_analysis(analysis) >= 4:
                await db.add_example(
                    user_story, norm, analysis, is_golden=True, score=extract_score_from_analysis(analysis)
                )
                logger.info(f"Added improved story to golden examples: {user_story[:50]}...")

        except Exception as e:
            logger.error(f"Error in LLM analysis: {e}")
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ GigaChat. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
            if is_callback:
                await update.callback_query.edit_message_text(error_msg, reply_markup=navigation_keyboard())
            else:
                await analysis_msg.edit_text(error_msg, reply_markup=navigation_keyboard())

    except Exception as e:
        logger.error(f"Error in story analysis: {e}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."

        if is_callback:
            await update.callback_query.edit_message_text(error_msg, reply_markup=navigation_keyboard())
        else:
            await update.message.reply_text(error_msg, reply_markup=navigation_keyboard())

        logger.error(f"Error in story analysis: {e}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."

        if is_callback:
            await update.callback_query.edit_message_text(error_msg, reply_markup=navigation_keyboard())
        else:
            await update.message.reply_text(error_msg, reply_markup=navigation_keyboard())

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    query = update.callback_query
    if not query:
        return  #–µ—Å–ª–∏ –Ω–µ—Ç callback_query –≤—ã—Ö–æ–¥–∏–º

    data = query.data
    if not data:
        return  #–µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–∏–º

    try:
        await query.answer()
    except BadRequest as e:
        if "Query is too old" in str(e):
            logger.warning(f"Ignoring old callback query: {e}")
            return
        else:
            logger.error(f"Error in callback answer: {e}")

    llm_client = context.bot_data['llm_client']
    db = context.bot_data['db']

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        previous_state = context.user_data.get('current_state')

        if data == "analyze_invest":
            context.user_data['current_state'] = BotState.ANALYZING
            await query.edit_message_text(
                "‚úçÔ∏è *–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*\n\n–§–æ—Ä–º–∞—Ç: _–ö–∞–∫ <—Ä–æ–ª—å>, —è —Ö–æ—á—É <–¥–µ–π—Å—Ç–≤–∏–µ>, —á—Ç–æ–±—ã <—Ü–µ–ª—å>_",
                reply_markup=navigation_keyboard(previous_state),
                parse_mode='Markdown'
            )

        elif data.startswith("use_similar_"):
            context.user_data['current_state'] = BotState.SHOWING_RESULTS
            index = int(data.split('_')[-1])
            similar = context.user_data.get('similar_stories', [])

            if index < len(similar):
                story, answer, ratio, score = similar[index]

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                await db.increment_usage_count(normalize_text(story))

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                formatted_answer = format_analysis_for_display(answer)

                response_text = (
                    f"üìö *–ò—Å–ø–æ–ª—å–∑—É—é –ø–æ—Ö–æ–∂—É—é –∏—Å—Ç–æ—Ä–∏—é* (—Å—Ö–æ–¥—Å—Ç–≤–æ: {ratio:.0%})\n\n"
                    f"**User Story:**\n_{story}_\n\n{formatted_answer}"
                )

                keyboard = analysis_result_keyboard(
                    show_add_to_db=False,  # –ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –≤ –±–∞–∑–µ!
                    has_improvement_history='improvement_chain' in context.user_data,
                    analysis_text=formatted_answer
                )

                await query.edit_message_text(
                    response_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –∫—ç—à
                user_id = update.effective_user.id
                _add_to_user_history(context, user_id, story, formatted_answer)
                _cache_analysis(context, story, {
                    'story': story,
                    'analysis': formatted_answer,
                    'timestamp': datetime.now().isoformat()
                })

                context.user_data['last_analysis'] = {
                    'story': story,
                    'analysis': formatted_answer,
                    'timestamp': datetime.now().isoformat()
                }

            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.",
                    reply_markup=navigation_keyboard(previous_state)
                )

        elif data == "fix_with_llm":
            context.user_data['current_state'] = BotState.IMPROVING
            original = context.user_data.get('original')
            if not original:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                    reply_markup=navigation_keyboard(previous_state)
                )
                return

            prompt = build_fix_prompt(original)
            response = await llm_client.get_chat_completion(prompt)
            fixed = response[0].strip()

            await query.edit_message_text(
                f"‚ú® *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:*\n\n_{fixed}_\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é?",
                reply_markup=improved_story_keyboard(previous_state=BotState.SHOWING_SIMILAR),
                parse_mode='Markdown'
            )
            context.user_data['llm_fix'] = fixed
            context.user_data['pending_text'] = fixed

        elif data == "use_own":
            context.user_data['current_state'] = BotState.ANALYZING
            original = context.user_data.get('original')
            if not original:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.",
                    reply_markup=navigation_keyboard(previous_state)
                )
                return
            await _analyze_user_story(update, context, original, show_add_to_db=True, is_callback=True, skip_similar_search=True)

        elif data == "improve_story":
            context.user_data['current_state'] = BotState.IMPROVING
            pending = (context.user_data.get('pending_text') or
                      context.user_data.get('original') or
                      context.user_data.get('last_analysis', {}).get('story'))

            if not pending:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.",
                    reply_markup=navigation_keyboard(previous_state)
                )
                return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É —É–ª—É—á—à–µ–Ω–∏–π –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            if 'improvement_chain' not in context.user_data:
                context.user_data['improvement_chain'] = ImprovementChain()

                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
                last_analysis = context.user_data.get('last_analysis')
                if last_analysis:
                    context.user_data['improvement_chain'].add_version(
                        last_analysis['story'],
                        last_analysis['analysis'],
                        last_analysis.get('timestamp')
                    )
                else:
                    #–µ—Å–ª–∏ –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –≤–µ—Ä—Å–∏—é 1
                    initial_story = context.user_data.get('initial_story')
                    if initial_story:
                        context.user_data['improvement_chain'].add_version(
                            initial_story,
                            "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞",
                            datetime.now().isoformat()
                        )

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                current_analysis = None
                last_analysis = context.user_data.get('last_analysis')
                if last_analysis:
                    current_analysis = last_analysis.get('analysis')

                prompt = build_improve_prompt(pending, current_analysis)
                response = await llm_client.get_chat_completion(prompt)
                improved = response[0].strip()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                context.user_data['improvement_chain'].add_version(improved, "–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞")

                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
                chain = context.user_data['improvement_chain']
                initial = chain.get_initial()
                latest = chain.get_latest()

                message_text = "üîÑ *–¶–µ–ø–æ—á–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π*\n\n"

                if initial:
                    message_text += f"üìù *–ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è:*\n_{initial['story']}_\n\n"
                    if 'analysis' in initial and initial['analysis']:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                        score_match = re.search(r'–û—Ü–µ–Ω–∫–∞:\s*(\d/6)', initial['analysis'])
                        if score_match:
                            message_text += f"üìä **–ò—Å—Ö–æ–¥–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:** {score_match.group(1)}\n\n"

                message_text += f"üöÄ *–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (v{latest['version']}):*\n_{latest['story']}_\n\n"
                message_text += "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é?"

                await query.edit_message_text(
                    message_text,
                    reply_markup=improved_story_keyboard(previous_state=BotState.SHOWING_RESULTS),
                    parse_mode='Markdown'
                )
                context.user_data['improved_story'] = improved
                context.user_data['pending_text'] = improved

            except Exception as e:
                logger.error(f"Error improving story: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=navigation_keyboard(previous_state)
                )

        elif data == "analyze_improved":
            context.user_data['current_state'] = BotState.ANALYZING
            improved = context.user_data.get('improved_story')
            if not improved:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                    reply_markup=navigation_keyboard(previous_state)
                )
                return
            await _analyze_user_story(update, context, improved, show_add_to_db=True, is_improved=True, is_callback=True)

        elif data == "improve_again":
            context.user_data['current_state'] = BotState.IMPROVING
            current = (context.user_data.get('improved_story') or
                      context.user_data.get('pending_text'))

            if not current:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.",
                    reply_markup=navigation_keyboard(previous_state)
                )
                return

            context.user_data['pending_text'] = current
            prompt = build_improve_prompt(current)
            response = await llm_client.get_chat_completion(prompt)
            improved = response[0].strip()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ —Ü–µ–ø–æ—á–∫—É
            if 'improvement_chain' in context.user_data:
                context.user_data['improvement_chain'].add_version(
                    improved,
                    "–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
                )

            await query.edit_message_text(
                f"üöÄ *–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:*\n\n_{improved}_\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é?",
                reply_markup=improved_story_keyboard(previous_state=BotState.IMPROVING),
                parse_mode='Markdown'
            )
            context.user_data['improved_story'] = improved

        elif data == "show_improvement_history":
            context.user_data['current_state'] = BotState.SHOWING_HISTORY

            chain = context.user_data.get('improvement_chain')
            if not chain or len(chain.versions) < 1:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞.",
                    reply_markup=navigation_keyboard(previous_state)
                )
                return

            message_text = "üìã *–ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π User Story*\n\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –≤–µ—Ä—Å–∏–∏, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–π
            for version in chain.versions:
                message_text += f"*–í–µ—Ä—Å–∏—è {version['version']}:*\n"
                message_text += f"_{version['story']}_\n"

                if version.get('analysis') and version['analysis'] != "–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞":
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                    score_match = re.search(r'–û—Ü–µ–Ω–∫–∞:\s*(\d/6)', version['analysis'])
                    if score_match:
                        message_text += f"üìä **–û—Ü–µ–Ω–∫–∞:** {score_match.group(1)}\n"

                message_text += "\n" + "‚ïê" * 40 + "\n\n"

            message_text += "–í—ã –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é."

            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            message_text = safe_truncate_text(message_text)

            await query.edit_message_text(
                message_text,
                reply_markup=improvement_history_keyboard(previous_state),
                parse_mode='Markdown'
            )

        elif data == "export_txt":
            context.user_data['current_state'] = BotState.SHOWING_RESULTS
            last_analysis = context.user_data.get('last_analysis')
            if not last_analysis:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                    reply_markup=navigation_keyboard(previous_state)
                )
                return

            content = f"User Story:\n{last_analysis['story']}\n\n–ê–Ω–∞–ª–∏–∑ INVEST:\n{last_analysis['analysis']}"
            if 'timestamp' in last_analysis:
                content += f"\n\n–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {last_analysis['timestamp']}"

            bio = io.BytesIO(content.encode('utf-8'))
            bio.name = 'analysis.txt'

            await query.message.reply_document(
                document=InputFile(bio, filename='INVEST_analysis.txt'),
                caption="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ TXT"
            )
            bio.close()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞
            await query.edit_message_text(
                f"**User Story:**\n_{last_analysis['story']}_\n\n{last_analysis['analysis']}",
                reply_markup=analysis_result_keyboard(
                    show_add_to_db=True,
                    has_improvement_history='improvement_chain' in context.user_data
                ),
                parse_mode='Markdown'
            )

        elif data == "export_csv":
            context.user_data['current_state'] = BotState.SHOWING_RESULTS
            last_analysis = context.user_data.get('last_analysis')
            if not last_analysis:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                    reply_markup=navigation_keyboard(previous_state)
                )
                return

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è CSV
            story_escaped = last_analysis['story'].replace('"', '""')
            analysis_escaped = last_analysis['analysis'].replace('"', '""')

            content = f'"{story_escaped}";"{analysis_escaped}"'
            bio = io.BytesIO(content.encode('utf-8'))
            bio.name = 'analysis.csv'

            await query.message.reply_document(
                document=InputFile(bio, filename='INVEST_analysis.csv'),
                caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ CSV"
            )
            bio.close()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞
            await query.edit_message_text(
                f"**User Story:**\n_{last_analysis['story']}_\n\n{last_analysis['analysis']}",
                reply_markup=analysis_result_keyboard(
                    show_add_to_db=True,
                    has_improvement_history='improvement_chain' in context.user_data
                ),
                parse_mode='Markdown'
            )

        elif data == "export_improved":
            context.user_data['current_state'] = BotState.IMPROVING
            improved = context.user_data.get('improved_story')
            if not improved:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                    reply_markup=navigation_keyboard(previous_state)
                )
                return

            content = f"–£–ª—É—á—à–µ–Ω–Ω–∞—è User Story:\n{improved}\n\n‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ INVEST-Checker"
            bio = io.BytesIO(content.encode('utf-8'))
            bio.name = 'improved_user_story.txt'

            await query.message.reply_document(
                document=InputFile(bio, filename='improved_user_story.txt'),
                caption="üöÄ –≠–∫—Å–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"
            )
            bio.close()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
            await query.edit_message_text(
                f"üöÄ **–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:**\n\n_{improved}_\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é?",
                reply_markup=improved_story_keyboard(previous_state=BotState.IMPROVING),
                parse_mode='Markdown'
            )

        elif data == "add_to_db":
            context.user_data['current_state'] = BotState.SHOWING_RESULTS
            last_analysis = context.user_data.get('last_analysis')
            if not last_analysis:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É.",
                    reply_markup=navigation_keyboard(previous_state)
                )
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ü–µ–ø–æ—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            story_to_add = last_analysis['story']
            chain = context.user_data.get('improvement_chain')
            if chain and chain.get_initial():
                story_to_add = chain.get_initial()['story']  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ—Ä—Å–∏—é

            norm = normalize_text(story_to_add)
            await db.add_example(
                story_to_add, norm, last_analysis['analysis'], is_golden=False, score=0
            )

            await query.edit_message_text(
                "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!",
                reply_markup=navigation_keyboard(BotState.SHOWING_RESULTS)
            )

        elif data == "back":
            """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                previous_state = context.user_data.get('current_state')

                # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                if not previous_state:
                    await query.edit_message_text(
                        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=main_menu_keyboard()
                    )
                    context.user_data['current_state'] = BotState.MAIN_MENU
                    return

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
                if previous_state == BotState.SHOWING_SIMILAR:
                    similar_stories = context.user_data.get('similar_stories', [])
                    original = context.user_data.get('original', '')

                    if similar_stories:
                        await query.edit_message_text(
                            "üîç **–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑–µ:**\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –≤–∞—à–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:",
                            reply_markup=similar_stories_keyboard(similar_stories, original)
                        )
                        context.user_data['current_state'] = BotState.SHOWING_SIMILAR
                    else:
                        await query.edit_message_text(
                            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=main_menu_keyboard()
                        )
                        context.user_data['current_state'] = BotState.MAIN_MENU

                elif previous_state == BotState.SHOWING_RESULTS:
                    last_analysis = context.user_data.get('last_analysis')
                    if last_analysis:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "not modified"
                        timestamp = datetime.now().strftime("%H:%M:%S")
                        response_text = (
                            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞** ({timestamp})\n\n"
                            f"**User Story:**\n_{last_analysis['story']}_\n\n"
                            f"{last_analysis['analysis']}"
                        )

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É
                        should_show_add_button = should_show_add_to_db_button(
                            last_analysis['analysis'],
                            context.user_data.get('is_improved', False)
                        )

                        await query.edit_message_text(
                            response_text,
                            reply_markup=analysis_result_keyboard(
                                show_add_to_db=should_show_add_button,
                                has_improvement_history='improvement_chain' in context.user_data,
                                analysis_text=last_analysis['analysis']
                            ),
                            parse_mode='Markdown'
                        )
                        context.user_data['current_state'] = BotState.SHOWING_RESULTS
                    else:
                        await query.edit_message_text(
                            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=main_menu_keyboard()
                        )
                        context.user_data['current_state'] = BotState.MAIN_MENU

                elif previous_state == BotState.IMPROVING:
                    improved = context.user_data.get('improved_story')
                    if improved:
                        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                        timestamp = datetime.now().strftime("%H:%M:%S")
                        await query.edit_message_text(
                            f"üöÄ **–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è** ({timestamp})\n\n_{improved}_\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é?",
                            reply_markup=improved_story_keyboard(previous_state=BotState.SHOWING_RESULTS),
                            parse_mode='Markdown'
                        )
                        context.user_data['current_state'] = BotState.IMPROVING
                    else:
                        await query.edit_message_text(
                            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=main_menu_keyboard()
                        )
                        context.user_data['current_state'] = BotState.MAIN_MENU

                elif previous_state == BotState.EXPORT_MENU:
                    last_analysis = context.user_data.get('last_analysis')
                    if last_analysis:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                        timestamp = datetime.now().strftime("%H:%M:%S")
                        await query.edit_message_text(
                            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞** ({timestamp})\n\n"
                            f"**User Story:**\n_{last_analysis['story']}_\n\n"
                            f"{last_analysis['analysis']}",
                            reply_markup=analysis_result_keyboard(
                                show_add_to_db=True,
                                has_improvement_history='improvement_chain' in context.user_data
                            ),
                            parse_mode='Markdown'
                        )
                        context.user_data['current_state'] = BotState.SHOWING_RESULTS
                    else:
                        await query.edit_message_text(
                            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=main_menu_keyboard()
                        )
                        context.user_data['current_state'] = BotState.MAIN_MENU

                elif previous_state == BotState.SHOWING_HISTORY:
                    # –í–æ–∑–≤—Ä–∞—Ç –∫ –∏—Å—Ç–æ—Ä–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π
                    chain = context.user_data.get('improvement_chain')
                    if chain and len(chain.versions) >= 2:
                        message_text = "üìã **–ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π User Story**\n\n"
                        for i, version in enumerate(chain.versions):
                            message_text += f"**–í–µ—Ä—Å–∏—è {version['version']}:**\n"
                            message_text += f"_{version['story']}_\n"
                            if 'analysis' in version and version['analysis']:
                                score_match = re.search(r'–û—Ü–µ–Ω–∫–∞:\s*(\d/6)', version['analysis'])
                                if score_match:
                                    message_text += f"üìä –û—Ü–µ–Ω–∫–∞: {score_match.group(1)}\n"
                            message_text += "\n" + "‚ïê" * 30 + "\n\n"
                        message_text += "–í—ã –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é."

                        await query.edit_message_text(
                            message_text,
                            reply_markup=improvement_history_keyboard(BotState.SHOWING_RESULTS),
                            parse_mode='Markdown'
                        )
                        context.user_data['current_state'] = BotState.SHOWING_HISTORY
                    else:
                        # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                        await query.edit_message_text(
                            "‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞.",
                            reply_markup=navigation_keyboard(BotState.SHOWING_RESULTS)
                        )
                        context.user_data['current_state'] = BotState.SHOWING_RESULTS

                elif previous_state == BotState.SHOWING_DATABASE:
                    # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    current_page = context.user_data.get('current_db_page', 0)
                    await show_database(update, context, current_page)

                elif previous_state == BotState.SHOWING_STORY_DETAILS:
                    # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫ —Å–ø–∏—Å–∫—É
                    current_page = context.user_data.get('current_db_page', 0)
                    await show_database(update, context, current_page)

                elif previous_state == BotState.EXPORT_MENU:
                    last_analysis = context.user_data.get('last_analysis')
                    if last_analysis:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                        response_text = format_analysis_for_display(last_analysis['analysis'], last_analysis['story'])
                        await query.edit_message_text(
                            response_text,
                            reply_markup=analysis_result_keyboard(
                                show_add_to_db=True,
                                has_improvement_history='improvement_chain' in context.user_data,
                                analysis_text=last_analysis['analysis']
                            ),
                            parse_mode='Markdown'
                        )
                        context.user_data['current_state'] = BotState.SHOWING_RESULTS
                    else:
                        await query.edit_message_text(
                            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=main_menu_keyboard()
                        )
                        context.user_data['current_state'] = BotState.MAIN_MENU


                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await query.edit_message_text(
                        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=main_menu_keyboard()
                    )
                    context.user_data['current_state'] = BotState.MAIN_MENU

            except BadRequest as e:
                if "Message is not modified" in str(e):
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    logger.debug("Message not modified - already in correct state")
                    return
                else:
                    logger.error(f"BadRequest in back handler: {e}")
                    try:
                        await query.edit_message_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                            reply_markup=main_menu_keyboard()
                        )
                        context.user_data['current_state'] = BotState.MAIN_MENU
                    except Exception as fallback_error:
                        logger.error(f"Fallback also failed: {fallback_error}")

            except Exception as e:
                logger.error(f"Unexpected error in back handler: {e}")
                try:
                    await query.edit_message_text(
                        "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                        reply_markup=main_menu_keyboard()
                    )
                    context.user_data['current_state'] = BotState.MAIN_MENU
                except Exception as fallback_error:
                    logger.error(f"Fallback also failed: {fallback_error}")

        elif data == "restart":
            try:
                # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                keys_to_keep = ['initial_story', 'user_history', 'last_analysis']
                temp_data = {}
                for key in keys_to_keep:
                    if key in context.user_data:
                        temp_data[key] = context.user_data[key]

                context.user_data.clear()
                context.user_data.update(temp_data)

                await query.edit_message_text(
                    "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=main_menu_keyboard()
                )
                context.user_data['current_state'] = BotState.MAIN_MENU

            except Exception as e:
                logger.error(f"Error in restart: {e}")
                # Fallback - –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await query.message.reply_text(
                        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ User Story –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=main_menu_keyboard()
                    )
                except Exception as fallback_error:
                    logger.error(f"Restart fallback also failed: {fallback_error}")

        elif data == "stats":
            context.user_data['current_state'] = BotState.STATS
            await stats(update, context)

        elif data == "help":
            context.user_data['current_state'] = BotState.HELP
            help_text = (
                "üìñ **–ü–æ–º–æ—â—å –ø–æ INVEST-Checker**\n\n"
                "**INVEST –∫—Ä–∏—Ç–µ—Ä–∏–∏:**\n"
                "‚Ä¢ **I** - –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è (Independent)\n"
                "‚Ä¢ **N** - –û–±—Å—É–∂–¥–∞–µ–º–∞—è (Negotiable) \n"
                "‚Ä¢ **V** - –¶–µ–Ω–Ω–∞—è (Valuable)\n"
                "‚Ä¢ **E** - –û—Ü–µ–Ω–∏–≤–∞–µ–º–∞—è (Estimable)\n"
                "‚Ä¢ **S** - –ú–∞–ª–µ–Ω—å–∫–∞—è (Small)\n"
                "‚Ä¢ **T** - –¢–µ—Å—Ç–∏—Ä—É–µ–º–∞—è (Testable)\n\n"
                "**–§–æ—Ä–º–∞—Ç User Story:**\n"
                "```\n–ö–∞–∫ <—Ä–æ–ª—å>, —è —Ö–æ—á—É <–¥–µ–π—Å—Ç–≤–∏–µ>, —á—Ç–æ–±—ã <—Ü–µ–ª—å>\n```\n"
                "**–ü—Ä–∏–º–µ—Ä:**\n"
                "_–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —è —Ö–æ—á—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ email, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É._"
            )
            await query.edit_message_text(help_text, reply_markup=help_keyboard(previous_state), parse_mode='Markdown')

        elif data == "show_database":
            context.user_data['current_state'] = BotState.SHOWING_DATABASE
            await show_database(update, context, page=0)

        elif data.startswith("db_page_"):
            page = int(data.split('_')[-1])
            await show_database(update, context, page)

        #elif data.startswith("analyze_db_"):
        #    story_id = int(data.split('_')[-1])
        #    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        #    await query.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


        elif data == "export":
            context.user_data['current_state'] = BotState.EXPORT_MENU
            await query.edit_message_text(
                "üì§ *–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                reply_markup=export_menu_keyboard(previous_state),
                parse_mode='Markdown'
            )

        else:
            await query.edit_message_text(
                "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.",
                reply_markup=navigation_keyboard(previous_state)
            )

    except BadRequest as e:
        if "Can't parse entities" in str(e):
            logger.warning(f"Markdown parsing error, sending as plain text: {e}")
            try:
                current_text = query.message.text
                await query.edit_message_text(
                    current_text,
                    parse_mode=None,
                    reply_markup=query.message.reply_markup
                )
            except Exception as fallback_error:
                logger.error(f"Fallback also failed: {fallback_error}")
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=navigation_keyboard(previous_state)
                )
        elif "Message is not modified" in str(e):
            logger.debug("Message not modified - ignoring")
            return
        else:
            logger.error(f"Error in callback handler for {data}: {e}")
            try:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=navigation_keyboard(previous_state)
                )
            except Exception as edit_error:
                logger.error(f"Failed to edit message: {edit_error}")

    except Exception as e:
        logger.error(f"Error in callback handler for {data}: {e}")
        try:
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=navigation_keyboard(previous_state)
            )
        except Exception as edit_error:
            logger.error(f"Failed to edit message: {edit_error}")

def register_handlers(app: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

async def show_database(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑—É –∏—Å—Ç–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        current_page = context.user_data.get('current_db_page', -1)
        if current_page == page:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞ –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "Message is not modified"
            return

        db = context.bot_data['db']
        page_size = 5  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –∏—Å—Ç–æ—Ä–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        stories = await db.get_all_stories(page, page_size)
        total_stories = await db.get_total_stories_count()
        total_pages = (total_stories + page_size - 1) // page_size if total_stories > 0 else 1

        if not stories:
            await update.callback_query.edit_message_text(
                "üìÅ **–ë–∞–∑–∞ User Stories –ø—É—Å—Ç–∞**\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤—É—é –∏—Å—Ç–æ—Ä–∏—é!",
                reply_markup=database_keyboard(page, total_pages, False, False),
                parse_mode='Markdown'
            )
            context.user_data['current_db_page'] = page
            context.user_data['current_state'] = BotState.SHOWING_DATABASE
            return

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = "üìÅ *–ë–∞–∑–∞ User Stories*\n\n"
        message_text += f"üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}* | –í—Å–µ–≥–æ –∏—Å—Ç–æ—Ä–∏–π: {total_stories}\n\n"

        for i, story in enumerate(stories):
            story_number = page * page_size + i + 1
            score = story.get('score', 0)
            is_golden = story.get('is_golden', False)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            story_text = story['query']
            if len(story_text) > 80:
                story_text = story_text[:80] + "..."

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—Ä–∏–∏
            quality_emoji = "‚≠ê" if is_golden else "üìù"
            if score >= 5:
                quality_emoji = "üî•"
            elif score >= 4:
                quality_emoji = "‚úÖ"

            message_text += f"{quality_emoji} **{story_number}. [{score}/6]** {story_text}\n\n"

        message_text += "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏_"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö/—Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        has_previous = page > 0
        has_next = (page + 1) * page_size < total_stories

        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=database_keyboard(page, total_pages, has_previous, has_next),
            parse_mode='Markdown'
        )

        context.user_data['current_db_page'] = page
        context.user_data['current_state'] = BotState.SHOWING_DATABASE

    except Exception as e:
        logger.error(f"Error showing database: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∏—Å—Ç–æ—Ä–∏–π.",
            reply_markup=navigation_keyboard()
        )

async def show_story_details(update: Update, context: ContextTypes.DEFAULT_TYPE, story_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        db = context.bot_data['db']
        story = await db.get_story_by_id(story_id)

        if not story:
            await update.callback_query.edit_message_text(
                "‚ùå –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=database_keyboard(0, 1, False, False)
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        message_text = "üìñ **–î–µ—Ç–∞–ª–∏ User Story**\n\n"
        message_text += f"**ID:** {story['id']}\n"
        message_text += f"**–û—Ü–µ–Ω–∫–∞:** {story.get('score', 'N/A')}/6\n"
        message_text += f"**–°—Ç–∞—Ç—É—Å:** {'‚≠ê –ó–æ–ª–æ—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è' if story.get('is_golden') else 'üìù –û–±—ã—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è'}\n"
        message_text += f"**–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:** {story.get('created_at', 'N/A')}\n\n"

        message_text += f"**User Story:**\n_{story['query']}_\n\n"

        if story.get('answer'):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            analysis = format_analysis_for_display(story['answer'], story['query'])
            message_text += f"**–ê–Ω–∞–ª–∏–∑ INVEST:**\n{analysis}"

        current_page = context.user_data.get('current_db_page', 0)

        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=database_story_keyboard(story_id, current_page),
            parse_mode='Markdown'
        )

        context.user_data['current_state'] = BotState.SHOWING_STORY_DETAILS

    except Exception as e:
        logger.error(f"Error showing story details: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∏—Å—Ç–æ—Ä–∏–∏.",
            reply_markup=database_keyboard(0, 1, False, False)
        )

def _add_to_user_history(context: ContextTypes.DEFAULT_TYPE, user_id: int, story: str, analysis: str = None):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ bot_data
    if 'bot' in context.bot_data and hasattr(context.bot_data['bot'], 'add_to_user_history'):
        context.bot_data['bot'].add_to_user_history(user_id, story, analysis)
        return
    
    # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context.bot_data
    if 'user_history' not in context.bot_data:
        context.bot_data['user_history'] = {}
    
    if user_id not in context.bot_data['user_history']:
        context.bot_data['user_history'][user_id] = []
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π
        if 'stats' in context.bot_data:
            context.bot_data['stats']['user_sessions'] += 1

    history_entry = {
        'timestamp': datetime.now().isoformat(),
        'story': story,
        'analysis': analysis,
        'type': 'user_story'
    }

    context.bot_data['user_history'][user_id].append(history_entry)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    if 'stats' in context.bot_data:
        context.bot_data['stats']['total_messages'] += 1

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    max_history_depth = 50
    if len(context.bot_data['user_history'][user_id]) > max_history_depth:
        context.bot_data['user_history'][user_id] = context.bot_data['user_history'][user_id][-max_history_depth:]

def _cache_analysis(context: ContextTypes.DEFAULT_TYPE, story: str, analysis_data: dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ –∫—ç—à"""
    cache_key = f"analysis_{hash(story.lower().strip())}"
    if 'analysis_cache' not in context.bot_data:
        context.bot_data['analysis_cache'] = {}
    
    context.bot_data['analysis_cache'][cache_key] = analysis_data
    logger.debug(f"Cached analysis for: {story[:50]}...")

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    max_cache_size = 100
    if len(context.bot_data['analysis_cache']) > max_cache_size:
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        oldest_key = next(iter(context.bot_data['analysis_cache']))
        del context.bot_data['analysis_cache'][oldest_key]
